<?php

namespace Illuminate\Support;

use ArrayAccess;
use Illuminate\Support\Traits\EnumeratesValues;

/**
 * Ideas of markup could be fetched from https://github.com/doctrine/collections/blob/master/lib/Doctrine/Common/Collections/Collection.php
 *
 * @template TKey of array-key
 * @template T
 *
 * @template-implements ArrayAccess<TKey, T>
 * @template-implements Enumerable<TKey, T>
*/
class Collection implements ArrayAccess, Enumerable
{
    /** @use EnumeratesValues<TKey, T> */
    use EnumeratesValues;

    /** @param array<TKey, T> $items */
    public function __construct($items = []) {}

    /**
     * @psalm-mutation-free
     * @return array<TKey, T>
     */
    public function all() {}

    /**
     * @template TVal
     * @param array<TKey, TVal> $items
     * @return static<TKey, TVal>
     */
    public static function make($items = []) {}

    /**
     * @param  int  $number
     * @param  callable(array<T>, array-key):T  $callback
     * @return $this
     */
    public static function times($number, callable $callback = null) {}

    public static function wrap($value) {}

    public static function unwrap($value) {}

    public function average($callback = null) {}

    public function some($key, $operator = null, $value = null) {}

    /** @psalm-mutation-free */
    public function containsStrict($key, $value = null) {}

    public function dd(...$args) {}

    public function dump() {}

    /**
     * @param callable(T, array-key): $this
     * @return $this
     */
    public function each(callable $callback) {}

    public function eachSpread(callable $callback) {}

    public function every($key, $operator = null, $value = null) {}

    public function when($value, callable $callback, callable $default = null) {}

    public function whenEmpty(callable $callback, callable $default = null) {}

    public function whenNotEmpty(callable $callback, callable $default = null) {}

    public function unless($value, callable $callback, callable $default = null) {}

    public function unlessEmpty(callable $callback, callable $default = null) {}

    public function unlessNotEmpty(callable $callback, callable $default = null) {}

    public function where($key, $operator = null, $value = null) {}

    public function whereStrict($key, $value) {}

    public function whereIn($key, $values, $strict = false) {}

    public function whereInStrict($key, $values) {}

    public function whereBetween($key, $values) {}

    public function whereNotBetween($key, $values) {}

    public function whereNotIn($key, $values, $strict = false) {}

    public function whereNotInStrict($key, $values) {}

    public function whereInstanceOf($type) {}

    /**
     * @psalm-mutation-free
     * @psalm-assert-if-true T $this->first()
     * @psalm-assert-if-true T $this->last()
     */
    public function isNotEmpty(): bool {}

    public function mapSpread(callable $callback) {}

    public function mapToGroups(callable $callback) {}

    public function flatMap(callable $callback) {}

    public function mapInto($class) {}

    /**
     * @psalm-mutation-free
     * @param callable(T, array-key):bool|null $callback
     */
    public function min($callback = null) {}

    /** @psalm-mutation-free */
    public function max($callback = null) {}

    public function forPage($page, $perPage) {}

    public function partition($key, $operator = null, $value = null) {}

    public function sum($callback = null) {}

    public function tap(callable $callback) {}

    public function pipe(callable $callback) {}

    public function reject($callback = true) {}

    public function unique($key = null, $strict = false) {}

    public function uniqueStrict($key = null) {}

    public function countBy($callback = null) {}

    public function collect() {}

    /**
     * Get an iterator for the items.
     * @psalm-mutation-free
     * @return \ArrayIterator<T>
     */
    public function getIterator() {}

    public function __toString()
    {
        // TODO: Implement __toString() method.
    }

    public static function proxy($method) {}

    public function __get($key)
    {
        // TODO: Implement __get() method.
    }

    public function toJson($options = 0) {}

    public function jsonSerialize() {}

    /**
     * @param callable|string|null $callback
     * @return mixed
     */
    public function avg($callback = null) {}

    /**
     * @param string|array|null $key
     * @return mixed
     */
    public function median($key = null) {}

    /**
     * @param string|array|null $key
     * @return array<T>|null
     */
    public function mode($key = null) {}

    /**
     * @return $this
     */
    public function collapse() {}

    /**
     * @param array-key|callable(T, array-key):bool $key
     * @param mixed $operator
     * @param string|int|bool $value
     */
    public function contains($key, $operator = null, $value = null): bool {}

    /**
     * Cross join with the given lists, returning all possible permutations.
     *
     * @param array<T>|$this ...$lists
     * @return $this
     */
    public function crossJoin(...$lists) {}

    /**
     * @psalm-param  iterable<T>  $items
     * @return $this
     */
    public function diff($items) {}

    /**
     * @param iterable<T>    $items
     * @param callable $callback
     * @return $this
     */
    public function diffUsing($items, callable $callback) {}

    /**
     * Get the items in the collection whose keys and values are not present in the given items.
     *
     * @param mixed $items
     * @return $this
     */
    public function diffAssoc($items) {}

    /**
     * Get the items in the collection whose keys and values are not present in the given items, using the callback.
     *
     * @param mixed    $items
     * @param callable(T, array-key):bool $callback
     * @return $this
     */
    public function diffAssocUsing($items, callable $callback) {}

    /**
     * Get the items in the collection whose keys are not present in the given items.
     *
     * @param mixed $items
     * @psalm-param array-key[] $items
     * @return $this
     */
    public function diffKeys($items) {}

    /**
     * Get the items in the collection whose keys are not present in the given items, using the callback.
     *
     * @param mixed    $items
     * @param callable(T, array-key):bool $callback
     *
     * @return $this
     */
    public function diffKeysUsing($items, callable $callback) {}

    /**
     * Retrieve duplicate items from the collection.
     *
     * @param callable|null $callback
     * @param bool          $strict
     * @return $this
     */
    public function duplicates($callback = null, $strict = false) {}

    /**
     * Retrieve duplicate items from the collection using strict comparison.
     *
     * @param callable|null $callback
     * @return $this
     */
    public function duplicatesStrict($callback = null) {}

    /**
     * Get all items except for those with the specified keys.
     *
     * @param iterable<T>|iterable<int> $keys
     * @return $this
     */
    public function except($keys) {}

    /**
     * Run a filter over each of the items.
     *
     * @param callable(T, TKey):bool|null $callback
     * @psalm-mutation-free
     * @return $this
     */
    public function filter(callable $callback = null) {}

    /**
     * @param callable(T, array-key):bool|null $callback
     * @psalm-mutation-free
     * @return T|null
     */
    public function first(callable $callback = null, $default = null) {}

    /**
     * Get a flattened array of the items in the collection.
     *
     * @param int $depth
     * @return static
     */
    public function flatten($depth = INF) {}

    /**
     * Flip the items in the collection.
     *
     * @return static
     */
    public function flip() {}

    /**
     * Remove an item from the collection by key.
     *
     * @param string|array $keys
     * @return $this
     */
    public function forget($keys) {}

    /**
     * Get an item from the collection by key.
     *
     * @param array-key $key
     * @param mixed $default
     *
     * @psalm-mutation-free
     * @return T
     */
    public function get($key, $default = null) {}

    /**
     * Group an associative array by a field or using a callback.
     *
     * @param array|callable|string $groupBy
     * @param bool                  $preserveKeys
     * @return static
     */
    public function groupBy($groupBy, $preserveKeys = false) {}

    /**
     * Key an associative array by a field or using a callback.
     *
     * @param callable|string $keyBy
     * @return $this
     */
    public function keyBy($keyBy) {}

    /**
     * Determine if an item exists in the collection by key.
     *
     * @param mixed $key
     * @psalm-mutation-free
     */
    public function has($key): bool {}

    /**
     * Concatenate values of a given key as a string.
     *
     * @param string $value
     * @param string $glue
     * @return string
     */
    public function implode($value, $glue = null) {}

    /**
     * Intersect the collection with the given items.
     *
     * @param mixed $items
     * @psalm-mutation-free
     * @return $this
     */
    public function intersect($items) {}

    /**
     * Intersect the collection with the given items by key.
     *
     * @param mixed $items
     * @return static
     */
    public function intersectByKeys($items) {}

    /**
     * Determine if the collection is empty or not.
     * @psalm-mutation-free
     * @psalm-assert-if-false T $this->first()
     */
    public function isEmpty(): bool {}

    /**
     * Join all items from the collection using a string. The final items can use a separate glue string.
     *
     * @param string $glue
     * @param string $finalGlue
     * @return string
     */
    public function join($glue, $finalGlue = '') {}

    /**
     * Get the keys of the collection items.
     *
     * @return static<int, array-key>
     */
    public function keys() {}

    /**
     * Get the last item from the collection.
     *
     * @param callable|null $callback
     * @param mixed         $default
     * @return T
     */
    public function last(callable $callback = null, $default = null) {}

    /**
     * Get the values of a given key.
     *
     * @param null|string|array $value
     * @param string|null  $key
     * @return ( $key is null ? static<int, array-key> : ( $value is null ? static<array-key, T> : static<int, array-key> ) )
     */
    public function pluck($value, $key = null) {}

    /**
     * @template TValue
     * @param callable(T, array-key):TValue $callback
     * @return static<TKey, TValue>
     */
    public function map(callable $callback) {}

    /**
     * Run a dictionary map over the items.
     *
     * The callback should return an associative array with a single key/value pair.
     *
     * @template TVal
     * @param callable(T, int|string):array<array-key, TVal> $callback
     * @return static<TKey, TVal>
     */
    public function mapToDictionary(callable $callback) {}

    /**
     * @template TK
     * @template TValue
     * @param callable(T, TKey):array<TK, TValue> $callback
     * @return static<TK, TValue>
     */
    public function mapWithKeys(callable $callback) {}

    /**
     * Merge the collection with the given items.
     *
     * @param iterable<T> $items
     * @return $this
     */
    public function merge($items) {}

    /**
     * Recursively merge the collection with the given items.
     *
     * @param mixed $items
     * @return static
     */
    public function mergeRecursive($items) {}

    /**
     * Create a collection by using this collection for keys and another for its values.
     *
     * @param mixed $values
     * @return static
     */
    public function combine($values) {}

    /**
     * Union the collection with the given items.
     *
     * @param mixed $items
     * @return static
     */
    public function union($items) {}

    /**
     * Create a new collection consisting of every n-th element.
     *
     * @param int $step
     * @param int $offset
     * @return static
     */
    public function nth($step, $offset = 0) {}

    /**
     * Get the items with the specified keys.
     *
     * @param mixed $keys
     * @return $this
     */
    public function only($keys) {}

    /**
     * Get and remove the last item from the collection.
     *
     * @return T
     */
    public function pop() {}

    /**
     * Push an item onto the beginning of the collection.
     *
     * @psalm-param T $value
     *
     * @param mixed $value
     * @param mixed $key
     * @return $this
     */
    public function prepend($value, $key = null) {}

    /**
     * Push an item onto the end of the collection.
     *
     * @param mixed $value
     * @return $this
     */
    public function push($value) {}

    /**
     * Push all of the given items onto the collection.
     *
     * @param iterable $source
     * @return static
     */
    public function concat($source) {}

    /**
     * Get and remove an item from the collection.
     *
     * @param mixed $key
     * @param mixed $default
     * @return mixed
     */
    public function pull($key, $default = null) {}

    /**
     * Put an item in the collection by key.
     *
     * @param mixed $key
     * @param mixed $value
     * @return $this
     */
    public function put($key, $value) {}

    /**
     * Get one or a specified number of items randomly from the collection.
     *
     * @return ($number is null ? T : static<TKey, T>)
     */
    public function random(?int $number = null) {}

    /**
     * Replace the collection items with the given items.
     *
     * @param mixed $items
     * @return $this
     */
    public function replace($items) {}

    /**
     * Recursively replace the collection items with the given items.
     *
     * @param mixed $items
     * @return $this
     */
    public function replaceRecursive($items) {}

    /**
     * Reverse items order.
     *
     * @return $this
     */
    public function reverse() {}

    /**
     * Search the collection for a given value and return the corresponding key if successful.
     *
     * @param mixed $value
     * @param bool  $strict
     * @return mixed
     */
    public function search($value, $strict = false) {}

    /**
     * Get and remove the first item from the collection.
     *
     * @return mixed
     */
    public function shift() {}

    /**
     * Shuffle the items in the collection.
     *
     * @param int $seed
     * @return $this
     */
    public function shuffle($seed = null) {}

    /**
     * Skip the first {$count} items.
     *
     * @param int $count
     * @return $this
     */
    public function skip($count) {}

    /**
     * Slice the underlying collection array.
     *
     * @psalm-mutation-free
     * @param int $offset
     * @param int|null $length
     * @return $this
     */
    public function slice($offset, $length = null) {}

    /**
     * Split a collection into a certain number of groups.
     *
     * @param int $numberOfGroups
     * @return $this
     */
    public function split($numberOfGroups) {}

    /**
     * Chunk the collection into chunks of the given size.
     *
     * @param int $size
     * @return static<array-key, static<TKey, T>>
     */
    public function chunk($size) {}

    /**
     * Sort through each item with a callback.
     *
     * @param callable(T, T):int $callback
     * @return static<int, T>
     */
    public function sort(callable $callback = null) {}

    /**
     * Sort the collection using the given callback.
     *
     * @param callable(T, T):int|string $callback
     * @param int             $options
     * @param bool            $descending
     * @return $this
     */
    public function sortBy($callback, $options = SORT_REGULAR, bool $descending = false) {}

    /**
     * Sort the collection in descending order using the given callback.
     *
     * @param callable|string $callback
     * @param int             $options
     * @return $this
     */
    public function sortByDesc($callback, $options = SORT_REGULAR) {}

    /**
     * Sort the collection keys.
     * @return $this
     */
    public function sortKeys(int $options = SORT_REGULAR, bool $descending = false) {}

    /**
     * Sort the collection keys in descending order.
     *
     * @return $this
     */
    public function sortKeysDesc(int $options = SORT_REGULAR) {}

    /**
     * Splice a portion of the underlying collection array.
     *
     * @return $this
     */
    public function splice(int $offset, ?int $length = null, mixed $replacement = []) {}

    /**
     * Take the first or last {$limit} items.
     *
     * @return $this
     */
    public function take(int $limit) {}

    /**
     * Transform each item in the collection using a callback.
     *
     * @param callable $callback
     * @return self
     */
    public function transform(callable $callback) {}

    /**
     * @return $this
     */
    public function values() {}

    /**
     * Zip the collection together with one or more arrays.
     *
     * e.g. new Collection([1, 2, 3])->zip([4, 5, 6]) {}
     *      => [[1, 4], [2, 5], [3, 6]]
     *
     * @param mixed ...$items
     * @return static
     */
    public function zip($items) {}

    /**
     * @param int   $size
     * @param mixed $value
     * @return $this
     */
    public function pad($size, $value) {}

    /**
     * @psalm-mutation-free
     */
    public function count(): int {}

    /**
     * @param T $item
     * @return $this
     */
    public function add($item) {}

    /**
     * @psalm-mutation-free
     * @return self<TKey, T>
     */
    public function toBase() {}

    /**
     * @return \Illuminate\Support\LazyCollection<TKey, T>
     */
    public function lazy() {}

    /**
     * @param  array-key  $key
     * @return bool
     */
    public function offsetExists($key): bool {}

    /**
     * @param  array-key  $key
     * @return T|null
     * @psalm-ignore-nullable-return
     */
    public function offsetGet($key) {}

    /**
     * @param array-key $key
     * @param T         $value
     */
    public function offsetSet($key, $value): void {}

    /**
     * @param array-key $key
     */
    public function offsetUnset($key): void {}
}