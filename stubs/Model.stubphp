<?php

namespace Illuminate\Database\Eloquent {

  use Illuminate\Database\Eloquent\Relations\BelongsTo;
  use Illuminate\Database\Eloquent\Relations\HasMany;

  class Model
  {
      /** @use Concerns\HasRelationships */

      /** @var bool|list<string> */
      public $timestamps;

      /** @var ?string */
      protected $connection;

      /** @var string */
      protected $table;

      /** @var array<string, string> */
      protected $casts;

      /** @var list<string> */
      protected $fillable;

      /** @var null|string */
      protected $dateFormat;

      public function __isset(string $name): void {}

      /** @return mixed */
      public function __get(string $name) {}

      /** @param mixed $value */
      public function __set(string $name, $value): void {}

      public function __call($method, $parameters) {}

      public static function __callStatic($method, $parameters) {}

      public function increment(string $column, int $amount = 1, array $extra = []): void {}

      public function decrement(string $column, int $amount = 1, array $extra = []): void {}

      /**
       * @psalm-return Builder<static>
       */
      public static function newModelQuery() {}

      /**
       * @psalm-return Builder<static>
       */
      public static function newQuery() {}

      /**
       * @psalm-return Builder<static>
       */
      public static function query() {}

      /**
       * @param  array|mixed  $columns
       * @return Collection<static>
       */
      public static function all($columns = ['*']) {}

      /**
       * @param string[] $columns
       * @psalm-return Collection<static>
       */
      public function get($columns = ['*']) {}

      /**
       * @param $id
       * @param string[] $columns
       * @psalm-return $this
       */
      public function find($id, $columns = ['*']) {}

      /**
       * @param $id
       * @param string[] $columns
       * @psalm-return $this
       */
      public function findOrFail($id, $columns = ['*']) {}

      /**
       * @template T of Model
       * @param class-string<T> $related
       * @return HasMany<T>
       */
      public function hasMany(string $related, ?string $foreignKey = null, ?string $localKey = null) {}

      /** @return Builder<static> */
      public static function on(?string $connection = null) {}

      /**
       * @template T of Model
       * @param class-string<T> $related
       * @return BelongsTo<T>
       */
      public function belongsTo(string $related, ?string $foreignKey = null, ?string $ownerKey = null, ?string $relation = null) {}
  }
}

namespace Illuminate\Database\Eloquent {
  use Illuminate\Database\Eloquent\Builder;

  trait SoftDeletes
  {
    /** @return Builder<self> */
    public function withTrashed() {}
    /** @return Builder<self> */
    public function  onlyTrashed() {}
    /** @return Builder<self> */
    public function withoutTrashed() {}
  }
}