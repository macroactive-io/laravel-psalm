<?php

namespace Illuminate\Contracts\Pagination {

use Illuminate\Database\Eloquent\Model;

  /**
   * @template T of Model
   */
  interface Paginator
  {
      /**
       * Get all of the items being paginated.
       *
       * @return array<T>
       */
      public function items();
  }

  /**
   * @template T of Model
   * @extends Paginator<T>
   */
  interface LengthAwarePaginator extends Paginator {}
}

namespace Illuminate\Pagination {

use ArrayAccess;
use Countable;
use Illuminate\Contracts\Pagination\LengthAwarePaginator as LengthAwarePaginatorContract;
use Illuminate\Contracts\Support\Htmlable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Enumerable;

  /**
   * @template T
   * @mixin \Illuminate\Support\Collection<T>
   */
  abstract class AbstractPaginator implements Htmlable {}

  /**
   * @template T of object
   * @mixin \Illuminate\Support\Collection<T>
   *
   * @template-extends AbstractPaginator<T>
   * @template-implements LengthAwarePaginatorContract<T>
   * @template-implements Enumerable<T>
   * @template-implements ArrayAccess<array-key, T>
   */
  class LengthAwarePaginator extends AbstractPaginator implements LengthAwarePaginatorContract, Enumerable, ArrayAccess, Countable
  {
      /**
       * @param callable(T, array-key):bool|null $callback
       * @psalm-mutation-free
       * @return $this
       */
      public function filter(callable $callback = null) {}

      /**
       * @return array<T>
       */
      public function items() {}

      /**
       * @psalm-mutation-free
       * @return \Iterator<T>
       */
      public function getIterator() {}
  }
}