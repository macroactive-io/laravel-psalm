<?php

namespace Illuminate\Contracts\Pagination {
    use IteratorAggregate;
    use Traversable;

  /**
   * @template T
   * @template-implements IteratorAggregate<array-key,T>
   */
  interface Paginator extends IteratorAggregate
  {
      /**
       * Get all of the items being paginated.
       *
       * @return array<T>
       */
      public function items();

      /**
       * @return Traversable<array-key,T>
       */
      public function getIterator();
  }

  /**
   * @template T
   * @template-extends Paginator<T>
   */
  interface LengthAwarePaginator extends Paginator {}
}

namespace Illuminate\Pagination {

    use ArrayAccess;
    use Countable;
    use Illuminate\Contracts\Pagination\LengthAwarePaginator as LengthAwarePaginatorContract;
    use Illuminate\Contracts\Support\Htmlable;
    use Illuminate\Support\Enumerable;
    use IteratorAggregate;

    /**
     * @template T
     * @mixin \Illuminate\Support\Collection<int, T>
     */
    abstract class AbstractPaginator implements Htmlable {}

    /**
     * @template T
     *
     * @template-extends AbstractPaginator
     * @template-implements LengthAwarePaginatorContract<T>
     * @template-implements Enumerable<int, T>
     * @template-implements ArrayAccess<array-key, T>
     */
    class LengthAwarePaginator extends AbstractPaginator implements LengthAwarePaginatorContract, Enumerable, ArrayAccess
    {
        /**
         * @param callable(T, array-key):bool|null $callback
         * @psalm-mutation-free
         * @return $this
         */
        public function filter(callable $callback = null) {}

        /**
         * @psalm-mutation-free
         * @return \Traversable<array-key,T>
         */
        public function getIterator() {}
    }
}

namespace LaravelDoctrine\ORM\Pagination {
    use Illuminate\Contracts\Pagination\LengthAwarePaginator;

    /**
     * @template T
     */
    class PaginatorAdapter
    {
        /**
         * @return LengthAwarePaginator<T>
         */
        public function make(): LengthAwarePaginator {}
    }
}