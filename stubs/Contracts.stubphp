<?php

namespace Illuminate\Contracts\Container {
    class Container
    {
        /**
         * @template T of object
         * @psalm-param class-string<T> $abstract
         * @psalm-return T
         */
        public function make($abstract = null, array $parameters = []): object {}
    }
}

namespace Illuminate\Contracts\Filesystem {
    interface Filesystem
    {
        /** @return string[] */
        public function files(?string $directory = null, bool $recursive = false);

        /** @return string[] */
        public function allFiles(?string $directory = null);

        /** @return string[] */
        public function directories(?string $directory = null, bool $recursive = false);

        /** @return string[] */
        public function allDirectories(?string $directory = null);
    }
}

namespace Illuminate\Container {
    class Container
    {
        /**
         * @template T of object
         * @psalm-param class-string<T> $abstract
         * @psalm-return T
         */
        public function make($abstract = null, array $parameters = []): object {}

        /**
         * This definition of Psr container but it's overriden in Laravel :(
         * @template T of object
         * @psalm-param class-string<T> $id
         * @psalm-return T
         */
        public function get(string $id);
    }
}

namespace Psr\Container {
    interface ContainerInterface
    {
        /**
         * @template T of object
         * @psalm-param class-string<T> $id
         * @psalm-return T
         */
        public function get(string $id);
    }
}


namespace Illuminate\Contracts\Translation {
    class Translator {
        public function get(string $key, array $replace = [], string $locale = null): string {}
    }
}
