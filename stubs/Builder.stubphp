<?php

namespace Illuminate\Database\Eloquent;

use Closure;
use DateTimeInterface;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;

/**
 * @template T of Model
 * @mixin T
 */
class Builder
{
    /**
     * @return self<T>
     */
    public function getQuery(): Builder {}

    /**
     * @return Collection<T>
     */
    public function get($columns = ['*']): Collection {}

    /**
     * @param int|string $id
     * @param string[]   $columns
     * @return T
     */
    public function findOrFail($id, $columns = ['*']) {}

    /**
     * @param $id
     * @param string[] $columns
     * @psalm-return T
     */
    public function find($id, $columns = ['*']) {}

    /**
     * @param string[]   $columns
     * @return T
     */
    public function first($columns = ['*']) {}

    /**
     * @param string[]   $columns
     * @return T
     */
    public function firstOrFail($columns = ['*']) {}

    /**
     * @param string       $relation
     * @param Closure|null $callback
     * @param string       $operator
     * @param int          $count
     * @return Builder<T>
     */
    public function whereHas($relation, Closure $callback = null, $operator = '>=', $count = 1) {}

    /**
     * @param Builder|Closure|iterable $values
     * @param 'and'|'or'               $boolean
     * @return Builder<T>
     */
    public function whereIn(string $column, $values, string $boolean = 'and', bool $not = false) {}

    /**
     * @param string|callable $column
     * @param string|null     $operator
     * @param mixed           $value
     * @param 'and'|'or'      $boolean
     * @return Builder<T>
     */
    public function where($column, $operator = null, $value = null, $boolean = 'and') {}

    /**
     * @psalm-return Builder<T>
     */
    public function orderBy($column, $direction = 'asc') {}

    /**
     * @psalm-return Builder<T>
     */
    public function groupBy(...$groups) {}

    /**
     * @param  int|null  $perPage
     * @param  array  $columns
     * @param  string  $pageName
     * @param  int|null  $page
     * @return LengthAwarePaginator<T>
     */
    public function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null) {}


    /**
     * @param  \Closure|array|string  $column
     * @param  mixed|null  $operator
     * @param  mixed|null  $value
     * @return Builder<T>
     */
    public function orWhere($column, $operator = null, $value = null) {}

    /**
     * @param  string|array $columns
     * @param  'and'|'or'   $boolean
     * @return Builder<T>
     */
    public function whereNotNull($columns, $boolean = 'and') {}

    /**
     * @param  string|array $columns
     * @param  'and'|'or'   $boolean
     * @param  bool         $not
     * @return Builder<T>
     */
    public function whereNull($columns, $boolean = 'and', $not = false) {}

    /**
     * @param  string|array $columns
     * @return Builder<T>
     */
    public function orWhereNotNull($columns) {}

    /**
     * @param  string|string[]  $relations
     * @return Builder<T>
     */
    public function with($relations) {}

    /**
     * @param  \Closure|array|string  $column
     * @return Builder<T>
     */
    public function latest($column = null) {}

    /**
     * @param  array{0: string|int|DateTimeInterface, 1: string|int|DateTimeInterface} $values
     * @return Builder<T>
     */
    public function orWhereBetween(string $column, array $values) {}

    /**
     * @param  array{0: string|int|DateTimeInterface, 1: string|int|DateTimeInterface} $values
     * @return Builder<T>
     */
    public function whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false) {}

    /**
     * @param  iterable $values
     * @return Builder<T>
     */
    public function orWhereIn(string $column, $values, string $boolean = 'and', bool $not = false) {}

    /**
     * @param  iterable $values
     * @return Builder<T>
     */
    public function whereNotIn(string $column, $values, string $boolean = 'and') {}

    /**
     * @param  iterable $values
     * @return Builder<T>
     */
    public function orWhereNotIn(string $column, $values) {}

    /**
     * @param  array{0: string|int|DateTimeInterface, 1: string|int|DateTimeInterface} $values
     * @return Builder<T>
     */
    public function whereNotBetween(string $column, array $values, string $boolean = 'and') {}

    /**
     * @param  array{0: string|int|DateTimeInterface, 1: string|int|DateTimeInterface} $values
     * @return Builder<T>
     */
    public function orWhereNotBetween(string $column, array $values) {}

    public function __call($name, $arguments) {}

    public static function __callStatic($name, $arguments) {}
}