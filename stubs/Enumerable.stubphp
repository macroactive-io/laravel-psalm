<?php

/** Psalm doesn't have this stub somehow */
namespace {
    interface JsonSerializable  {
        /**
         * @return string|array
         */
        public function jsonSerialize();
    }
}

namespace Illuminate\Support\Traits {
    use Illuminate\Contracts\Support\Arrayable;
    use Illuminate\Contracts\Support\Jsonable;
    use IteratorAggregate;
    use JsonSerializable;
    use Traversable;
    use Countable;

    /**
     * @template TKey of array-key
     * @template TValue
     */
    trait EnumeratesValues
    {
        /**
         * @template TFirstDefault
         *
         * @param  (callable(TValue,TKey): bool)|null  $callback
         * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
         * @return int|object
         */
        public function first(callable $callback = null, $default = null) {}

        /**
         * Create a new collection instance if the value isn't one already.
         *
         * @param mixed $items
         * @return $this
         */
        public static function make($items = []) {}

        /** @param int      $number
         * @param callable $callback
         * @return $this
         */
        public static function times($number, callable $callback = null) {}

        /**
         * @return $this
         */
        public static function wrap($value) {}

        /** @param array|static $value
         * @return array
         */
        public static function unwrap($value) {}

        /** @return array<TValue> */
        public function all() {}

        /** @return array<TValue> */
        public function toArray() {}

        /**
         * Alias for the "avg" method.
         *
         * @param callable|string|null $callback
         * @return mixed
         */
        public function average($callback = null) {}

        /** @param string|array|null $key
         * @return mixed
         */
        public function median($key = null) {}

        /** @param string|array|null $key
         * @return array|null
         */
        public function mode($key = null) {}

        /** @return $this
         */
        public function collapse() {}

        /**
         * Alias for the "contains" method.
         *
         * @param mixed $key
         * @param mixed $operator

         * @return bool
         */
        public function some($key, $operator = null, $value = null) {}

        /** @param mixed $key

         * @return bool
         */
        public function containsStrict($key, $value = null) {}

        /** @param callable|string|null $callback
         * @return mixed
         */
        public function avg($callback = null) {}

        /** @param mixed $key
         * @param mixed $operator

         * @return bool
         */
        public function contains($key, $operator = null, $value = null) {}

        /** @param mixed ...$args
         * @return void
         */
        public function dd(...$args) {}

        /** @return $this
         */
        public function dump() {}

        public function diff($items) {}

        /** @param mixed    $items
         * @param callable $callback
         * @return $this
         */
        public function diffUsing($items, callable $callback) {}

        /** @param mixed $items
         * @return $this
         */
        public function diffAssoc($items) {}

        /** @param mixed    $items
         * @param callable $callback
         * @return $this
         */
        public function diffAssocUsing($items, callable $callback) {}

        /** @param mixed $items
         * @return $this
         */
        public function diffKeys($items) {}

        /** @param mixed    $items
         * @param callable $callback
         * @return $this
         */
        public function diffKeysUsing($items, callable $callback) {}

        /** @param callable|null $callback
         * @param bool          $strict
         * @return $this
         */
        public function duplicates($callback = null, $strict = false) {}

        /** @param callable|null $callback
         * @return $this
         */
        public function duplicatesStrict($callback = null) {}

        /** @param callable $callback
         * @return $this
         */
        public function each(callable $callback) {}

        /** @param callable $callback
         * @return $this
         */
        public function eachSpread(callable $callback) {}

        /** @param string|callable $key
         * @param mixed           $operator
         * @param mixed           $value
         * @return bool
         */
        public function every($key, $operator = null, $value = null) {}

        /** @param mixed $keys
         * @return $this
         */
        public function except($keys) {}

        /** @param callable|null $callback
         * @return $this
         */
        public function filter(callable $callback = null) {}

        /** @param bool     $value
         * @param callable $callback
         * @param callable $default
         * @return $this|mixed
         */
        public function when($value, callable $callback, callable $default = null) {}

        /** @param callable $callback
         * @param callable $default
         * @return $this|mixed
         */
        public function whenEmpty(callable $callback, callable $default = null) {}

        /** @param callable $callback
         * @param callable $default
         * @return $this|mixed
         */
        public function whenNotEmpty(callable $callback, callable $default = null) {}

        /** @param bool     $value
         * @param callable $callback
         * @param callable $default
         * @return $this|mixed
         */
        public function unless($value, callable $callback, callable $default = null) {}

        /** @param callable $callback
         * @param callable $default
         * @return $this|mixed
         */
        public function unlessEmpty(callable $callback, callable $default = null) {}

        /** @param callable $callback
         * @param callable $default
         * @return $this|mixed
         */
        public function unlessNotEmpty(callable $callback, callable $default = null) {}

        /** @param string $key
         * @param mixed  $operator
         * @param mixed  $value
         * @return $this
         */
        public function where($key, $operator = null, $value = null) {}

        /** @param string $key
         * @param mixed  $value
         * @return $this
         */
        public function whereStrict($key, $value) {}

        /** @param string $key
         * @param mixed  $values
         * @param bool   $strict
         * @return $this
         */
        public function whereIn($key, $values, $strict = false) {}

        /** @param string $key
         * @param mixed  $values
         * @return $this
         */
        public function whereInStrict($key, $values) {}

        /** @param string $key
         * @param array  $values
         * @return $this
         */
        public function whereBetween($key, $values) {}

        /** @param string $key
         * @param array  $values
         * @return $this
         */
        public function whereNotBetween($key, $values) {}

        /** @param string $key
         * @param mixed  $values
         * @param bool   $strict
         * @return $this
         */
        public function whereNotIn($key, $values, $strict = false) {}

        /** @param string $key
         * @param mixed  $values
         * @return $this
         */
        public function whereNotInStrict($key, $values) {}

        /**
         * Filter the items, removing any items that don't match the given type.
         *
         * @param string $type
         * @return $this
         */
        public function whereInstanceOf($type) {}

        /** @param string $key
         * @param mixed  $operator
         * @param mixed  $value
         * @return TValue|null
         */
        public function firstWhere($key, $operator = null, $value = null) {}

        /** @return $this
         */
        public function flip() {}

        /** @param mixed $key
         * @param mixed $default
         * @return TValue|null
         */
        public function get($key, $default = null) {}

        /** @param array|callable|string $groupBy
         * @param bool                  $preserveKeys
         * @return $this
         */
        public function groupBy($groupBy, $preserveKeys = false) {}

        /** @param callable|string $keyBy
         * @return $this
         */
        public function keyBy($keyBy) {}

        /** @param mixed $key
         * @return bool
         */
        public function has($key) {}

        /** @param string $value
         * @param string $glue
         * @return string
         */
        public function implode($value, $glue = null) {}

        /** @param mixed $items
         * @return $this
         */
        public function intersect($items) {}

        /** @param mixed $items
         * @return $this
         */
        public function intersectByKeys($items) {}

        /**
         * @psalm-assert-if-true null $this->first()
         * @psalm-assert-if-false  TValue $this->last()
         * @return bool
         */
        public function isEmpty() {}

        /**
         * @psalm-assert-if-true !null $this->first()
         * @return bool
         */
        public function isNotEmpty() {}

        /** @param string $glue
         * @param string $finalGlue
         * @return string
         */
        public function join($glue, $finalGlue = '') {}

        /** @return $this
         */
        public function keys() {}

        /** @param callable|null $callback
         * @param mixed         $default
         * @return mixed
         */
        public function last(callable $callback = null, $default = null) {}

        /** @param callable $callback
         * @return $this
         */
        public function map(callable $callback) {}

        /** @param callable $callback
         * @return $this
         */
        public function mapSpread(callable $callback) {}

        /**         * The callback should return an associative array with a single key/value pair.
         *
         * @param callable $callback
         * @return $this
         */
        public function mapToDictionary(callable $callback) {}

        /**         * The callback should return an associative array with a single key/value pair.
         *
         * @param callable $callback
         * @return $this
         */
        public function mapToGroups(callable $callback) {}

        /**
         * @template T
         * @param callable(TValue, array-key):array<T> $callback
         * @return static<T>
         */
        public function mapWithKeys(callable $callback) {}

        /** @param callable $callback
         * @return $this
         */
        public function flatMap(callable $callback) {}

        /** @param string $class
         * @return $this
         */
        public function mapInto($class) {}

        /** @param mixed $items
         * @return $this
         */
        public function merge($items) {}

        /** @param mixed $items
         * @return $this
         */
        public function mergeRecursive($items) {}

        /**         s
         * @return $this
         */
        public function combine($values) {}

        /** @param mixed $items
         * @return $this
         */
        public function union($items) {}

        /** @param callable|string|null $callback
         * @return mixed
         */
        public function min($callback = null) {}

        /** @param callable|string|null $callback
         * @return mixed
         */
        public function max($callback = null) {}

        /**
         * Create a new collection consisting of every n-th element.
         *
         * @param int $step
         * @param int $offset
         * @return $this
         */
        public function nth($step, $offset = 0) {}

        /** @param mixed $keys
         * @return $this
         */
        public function only($keys) {}

        /**
         * "Paginate" the collection by slicing it into a smaller collection.
         *
         * @param int $page
         * @param int $perPage
         * @return $this
         */
        public function forPage($page, $perPage) {}

        /** @param callable|string $key
         * @param mixed           $operator
         * @param mixed           $value
         * @return $this
         */
        public function partition($key, $operator = null, $value = null) {}

        /** @param iterable $source
         * @return $this
         */
        public function concat($source) {}

        /** @param int|null $number
         * @return $this|mixed
         *
         * @throws \InvalidArgumentException
         */
        public function random($number = null) {}

        /**
         * @template T
         * @param callable(T, TValue, array-key):T $callback
         * @param mixed    $initial
         * @return T
         */
        public function reduce(callable $callback, $initial = null) {}

        /** @param mixed $items
         * @return $this
         */
        public function replace($items) {}

        /** @param mixed $items
         * @return $this
         */
        public function replaceRecursive($items) {}

        /** @return $this
         */
        public function reverse() {}

        /**
         * @param bool  $strict
         * @return mixed
         */
        public function search($value, $strict = false) {}

        /** @param int $seed
         * @return $this
         */
        public function shuffle($seed = null) {}

        /**
         * Skip the first {$count} items.
         *
         * @param int $count
         * @return $this
         */
        public function skip($count) {}

        /** @param int $offset
         * @param int $length
         * @return $this
         */
        public function slice($offset, $length = null) {}

        /** @param int $numberOfGroups
         * @return $this
         */
        public function split($numberOfGroups) {}

        /** @param int $size
         * @return $this
         */
        public function chunk($size) {}

        /** @param callable|null $callback
         * @return $this
         */
        public function sort(callable $callback = null) {}

        /** @param callable|string $callback
         * @param int             $options
         * @param bool            $descending
         * @return $this
         */
        public function sortBy($callback, $options = SORT_REGULAR, $descending = false) {}

        /** @param callable|string $callback
         * @param int             $options
         * @return $this
         */
        public function sortByDesc($callback, $options = SORT_REGULAR) {}

        /** @param int  $options
         * @param bool $descending
         * @return $this
         */
        public function sortKeys($options = SORT_REGULAR, $descending = false) {}

        /** @param int $options
         * @return $this
         */
        public function sortKeysDesc($options = SORT_REGULAR) {}

        /** @param callable|string|null $callback
         * @return mixed
         */
        public function sum($callback = null) {}

        /**
         * Take the first or last {$limit} items.
         *
         * @param int $limit
         * @return $this
         */
        public function take($limit) {}

        /** @param callable $callback
         * @return $this
         */
        public function tap(callable $callback) {}

        /** @param callable $callback
         * @return mixed
         */
        public function pipe(callable $callback) {}

        /** @param string|array $value
         * @param string|null  $key
         * @return ($key is null ? static<int|string|bool> : ( $value is null ? static<T> : static<int|string|bool> ))
         */
        public function pluck($value, $key = null) {}

        /** @param callable|mixed $callback
         * @return $this
         */
        public function reject($callback = true) {}

        /** @param string|callable|null $key
         * @param bool                 $strict
         * @return $this
         */
        public function unique($key = null, $strict = false) {}

        /** @param string|callable|null $key
         * @return $this
         */
        public function uniqueStrict($key = null) {}

        /** @return $this
         */
        public function values() {}

        /** @param int   $size

         * @return $this
         */
        public function pad($size, $value) {}

        /** @param callable|null $callback
         * @return $this
         */
        public function countBy($callback = null) {}

        /** @return \Illuminate\Support\Collection<TKey, TValue>
         */
        public function collect() {}

        /** @return string
         */
        public function __toString() {}

        /** @param string $method
         * @return void
         */
        public static function proxy($method) {}
    }
}
