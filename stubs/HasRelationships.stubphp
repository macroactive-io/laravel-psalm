<?php

namespace Illuminate\Database\Eloquent\Concerns;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\HasOneThrough;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Database\Eloquent\Relations\MorphOne;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Illuminate\Database\Eloquent\Relations\Relation;
use Illuminate\Database\Eloquent\Model;

// copypasted and just replaced `$this` with `self`
trait HasRelationships
{
    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     * @param  class-string<TRelatedModel>  $related
     * @return \Illuminate\Database\Eloquent\Relations\HasOne<TRelatedModel, self>
     */
    public function hasOne($related, string | null $foreignKey = null, string | null $localKey = null) {}

    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     * @template TIntermediateModel of \Illuminate\Database\Eloquent\Model
     *
     * @param  class-string<TRelatedModel>  $related
     * @param  class-string<TIntermediateModel>  $through
     * @return \Illuminate\Database\Eloquent\Relations\HasOneThrough<TRelatedModel, TIntermediateModel, self>
     */
    public function hasOneThrough($related, $through, null|string $firstKey = null, null|string $secondKey = null, null|string $localKey = null, null|string $secondLocalKey = null) {}

    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     *
     * @param  class-string<TRelatedModel>  $related
     * @return \Illuminate\Database\Eloquent\Relations\MorphOne<TRelatedModel, self>
     */
    public function morphOne($related, string $name, null|string $type = null, null|string $id = null, null|string $localKey = null) {}


    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     *
     * @param  class-string<TRelatedModel>  $related
     * @return \Illuminate\Database\Eloquent\Relations\BelongsTo<TRelatedModel, self>
     */
    public function belongsTo($related, null|string $foreignKey = null, null|string $ownerKey = null, null|string $relation = null) {}


    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     * @return \Illuminate\Database\Eloquent\Relations\MorphTo<TRelatedModel, self>
     */
    public function morphTo(null|string $name = null, null|string $type = null, null|string $id = null, null|string $ownerKey = null) {}

    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     *
     * @param  class-string<TRelatedModel>  $related
     * @return \Illuminate\Database\Eloquent\Relations\HasMany<TRelatedModel, self>
     */
    public function hasMany($related, string|null $foreignKey = null, string|null $localKey = null) {}

    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     * @template TIntermediateModel of \Illuminate\Database\Eloquent\Model
     *
     * @param  class-string<TRelatedModel>  $related
     * @param  class-string<TIntermediateModel>  $through
     * @return \Illuminate\Database\Eloquent\Relations\HasManyThrough<TRelatedModel, TIntermediateModel, self>
     */
    public function hasManyThrough($related, $through, string|null $firstKey = null, string|null $secondKey = null, string|null $localKey = null, string|null $secondLocalKey = null) {}

    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     *
     * @param  class-string<TRelatedModel>  $related
     * @return \Illuminate\Database\Eloquent\Relations\MorphMany<TRelatedModel, self>
     */
    public function morphMany($related, string $name, string|null $type = null, string|null $id = null, string|null $localKey = null) {}

    /**
     * @template TRelatedModel of \Illuminate\Database\Eloquent\Model
     *
     * @param  class-string<TRelatedModel>  $related
     * @param  string|class-string<\Illuminate\Database\Eloquent\Model>|null  $table
     * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany<TRelatedModel, self>
     */
    public function belongsToMany($related, $table = null, string|null $foreignPivotKey = null, string|null $relatedPivotKey = null,
                                  string|null $parentKey = null, string|null $relatedKey = null, string|null $relation = null)
    {}
}
