<?php

namespace Illuminate\Database\Eloquent\Concerns;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasManyThrough;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\Relations\HasOneThrough;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Database\Eloquent\Relations\MorphOne;
use Illuminate\Database\Eloquent\Relations\MorphTo;
use Illuminate\Database\Eloquent\Relations\MorphToMany;
use Illuminate\Database\Eloquent\Relations\Relation;

trait HasRelationships
{
    /**
     * @template RelName of class-string
     * @param  RelName $relation
     * @param  string|null  $foreignKey
     * @param  string|null  $localKey
     * @return HasOne<RelName>
     */
    public function hasOne($related, string $foreignKey = null, string $localKey = null) {}


    /**
     * @template RelName of class-string
     * @param  RelName $relation
     * @return Relations\HasOneThrough<RelName>
     */
    public function hasOneThrough($related, string $through, string $firstKey = null, string $secondKey = null, string $localKey = null, string $secondLocalKey = null) {}

    /**
     * @template RelName of class-string
     * @param  RelName $relation
     * @return Relations\MorphOne<RelName>
     */
    public function morphOne($related, string $name, string $type = null, string $id = null, string $localKey = null) {}

    /**
     * @template RelName of class-string
     * @param  RelName $relation
     * @return BelongsTo<RelName>
     */
    public function belongsTo($related, string $foreignKey = null, string $ownerKey = null, string $relation = null) {}

    /**
     * @param  string|null  $name
     * @param  string|null  $type
     * @param  string|null  $id
     * @param  string|null  $ownerKey
     * @return MorphTo
     */
    public function morphTo($name = null, $type = null, $id = null, $ownerKey = null) {}

    /**
     * @template RelName of class-string
     * @param  RelName $relation
     * @param  string|null  $foreignKey
     * @param  string|null  $localKey
     * @return HasMany<RelName>
     */
    public function hasMany($related, $foreignKey = null, $localKey = null) {}

    /**
     * @param  string  $related
     * @param  string  $through
     * @param  string|null  $firstKey
     * @param  string|null  $secondKey
     * @param  string|null  $localKey
     * @param  string|null  $secondLocalKey
     * @return HasManyThrough<static>
     */
    public function hasManyThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null, $secondLocalKey = null) {}

    /**
     * @param  string  $related
     * @param  string  $name
     * @param  string|null  $type
     * @param  string|null  $id
     * @param  string|null  $localKey
     * @return MorphMany<static>
     */
    public function morphMany($related, $name, $type = null, $id = null, $localKey = null) {}


    /**
     * @template RelName of class-string
     * @param  RelName $relation
     * @return BelongsToMany<RelName>
     */
    public function belongsToMany(string $related, ?string $table = null, ?string $foreignPivotKey = null, ?string $relatedPivotKey = null,
                                  ?string $parentKey = null, ?string $relatedKey = null, ?string $relation = null) {}
}
